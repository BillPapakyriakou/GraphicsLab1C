#version 330 core

// Interpolated values from the vertex shaders
in vec4 fragmentColor;
in vec2 UV;
in vec3 FragPos;
in vec3 Normal;  // Interpolated normal

// Output color
out vec4 color;

// Texture data
uniform sampler2D myTextureSampler;
uniform bool useTexture;  // Whether to use the texture

// Lighting data
uniform vec3 lightPos;      // Light position in world space
uniform vec3 lightColor;    // Color of the light
uniform vec3 viewPos;       // Camera position
uniform float shininess;    // Shininess for specular component
uniform float ambienceStrength;
uniform bool useLighting;   // Toggle for lighting effects
uniform bool visualizeNormals;

void main()
{
    vec3 finalColor;
	
    // Use texture if available, otherwise vertex color
    if (useTexture) {
        finalColor = texture(myTextureSampler, UV).rgb;
    } else {
        finalColor = fragmentColor.rgb;
    }

    // Visualize normals as colors
    if (visualizeNormals) {
        vec3 norm = normalize(Normal);
        color = vec4(norm * 0.5 + 0.5, 1.0); // Map [-1, 1] to [0, 1]
        return; // Skip further calculations
    }

    // Apply lighting if enabled
    if (useLighting) {
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(lightPos - FragPos);

        // Ambient lighting
        vec3 ambient = ambienceStrength * lightColor;

        // Diffuse lighting
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lightColor;

        // Specular lighting
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
        vec3 specular = spec * lightColor;

        // Combine lighting
        vec3 lighting = ambient + diffuse + specular;

        // Apply lighting to the base color
        //finalColor = vec3(1.0f, 0.0f, 0.0f);
	
	finalColor *= lighting;
	
    }

    // Output final color
    color = vec4(finalColor, 1.0);
    
}
